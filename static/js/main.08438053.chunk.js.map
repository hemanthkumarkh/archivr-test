{"version":3,"sources":["Scene.js","App.js","serviceWorker.js","index.js"],"names":["Scene","props","_this","Object","classCallCheck","this","_super","call","state","start","bind","assertThisInitialized","stop","animate","renderScene","computeBoundingBox","setupScene","destroyContext","handleWindowResize","window","addEventListener","width","container","clientWidth","height","clientHeight","renderer","THREE","antialias","setPixelRatio","devicePixelRatio","shadowMap","enabled","gammaOutput","gammaFactor","type","scene","background","camera","add","sphere","material","map","load","bumpMap","bumpScale","specularMap","loadTexture","specular","mesh","transparent","object","spotLight","position","set","ambLight","document","body","appendChild","VRButton","createButton","xr","setAnimationLoop","render","boundingBox","setFromObject","center","getCenter","size","getSize","maxDim","Math","max","x","y","z","fov","PI","cameraZ","tan","minZ","min","cameraToFarEdge","far","lookAt","updateProjectionMatrix","controls","OrbitControls","domElement","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableKeys","screenSpacePanning","enableRotate","autoRotate","autoRotateSpeed","enablePan","target","update","setSize","frameId","requestAnimationFrame","cancelAnimationFrame","innerWidth","innerHeight","aspect","removeChild","forceContextLoss","context","_this2","react_default","a","createElement","ref","style","overflow","Component","App","src_Scene","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08438053.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\r\n\r\nclass Scene extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.animate = this.animate.bind(this);\r\n    this.renderScene = this.renderScene.bind(this);\r\n    this.computeBoundingBox = this.computeBoundingBox.bind(this);\r\n    this.setupScene = this.setupScene.bind(this);\r\n    this.destroyContext = this.destroyContext.bind(this);\r\n    this.handleWindowResize = this.handleWindowResize.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    window.addEventListener(\"resize\", this.handleWindowResize);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setupScene();\r\n  }\r\n\r\n  setupScene() {\r\n    this.width = this.container.clientWidth;\r\n    this.height = this.container.clientHeight;\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.gammaOutput = true;\r\n    renderer.gammaFactor = 2.2;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    let scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(\"black\");\r\n\r\n    let camera = new THREE.PerspectiveCamera(\r\n      60,\r\n      this.width / this.height,\r\n      0.25,\r\n      1000\r\n    );\r\n    scene.add(camera);\r\n\r\n    let sphere = new THREE.SphereGeometry(50, 300, 300);\r\n    let material = new THREE.MeshPhongMaterial({\r\n      map: new THREE.TextureLoader().load(\"/Assets/2_no_clouds_4k.jpg\"),\r\n      bumpMap: new THREE.TextureLoader().load(\"/Assets/elev_bump_4k.jpg\"),\r\n      bumpScale: 0.005,\r\n      specularMap: THREE.ImageUtils.loadTexture(\"/Assets/water_4k.png\"),\r\n      specular: new THREE.Color(\"grey\"),\r\n    });\r\n    let mesh = new THREE.Mesh(sphere, material);\r\n    scene.add(mesh);\r\n    sphere = new THREE.SphereGeometry(50.1, 300, 300);\r\n    material = new THREE.MeshPhongMaterial({\r\n      map: new THREE.TextureLoader().load(\"/Assets/fair_clouds_4k.png\"),\r\n      transparent: true,\r\n    });\r\n    mesh = new THREE.Mesh(sphere, material);\r\n    scene.add(mesh);\r\n    this.renderer = renderer;\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.object = mesh;\r\n\r\n    let spotLight = new THREE.SpotLight(0xffffff, 0.25);\r\n    spotLight.position.set(45, 50, 15);\r\n    camera.add(spotLight);\r\n    this.spotLight = spotLight;\r\n\r\n    let ambLight = new THREE.AmbientLight(0x333333);\r\n    ambLight.position.set(5, 3, 5);\r\n    this.camera.add(ambLight);\r\n\r\n    this.computeBoundingBox();\r\n    document.body.appendChild( VRButton.createButton( renderer ) );\r\n    renderer.xr.enabled = true;\r\n    renderer.setAnimationLoop( function () {\r\n\r\n      renderer.render( scene, camera );\r\n    \r\n    } );\r\n  }\r\n\r\n  computeBoundingBox() {\r\n    let offset = 1.6;\r\n    const boundingBox = new THREE.Box3();\r\n    boundingBox.setFromObject(this.object);\r\n    const center = boundingBox.getCenter();\r\n    const size = boundingBox.getSize();\r\n    const maxDim = Math.max(size.x, size.y, size.z);\r\n    const fov = this.camera.fov * (Math.PI / 180);\r\n    let cameraZ = maxDim / 2 / Math.tan(fov / 2);\r\n    cameraZ *= offset;\r\n    this.camera.position.z = center.z + cameraZ;\r\n    const minZ = boundingBox.min.z;\r\n    const cameraToFarEdge = minZ < 0 ? -minZ + cameraZ : cameraZ - minZ;\r\n\r\n    this.camera.far = cameraToFarEdge * 3;\r\n    this.camera.lookAt(center);\r\n    this.camera.updateProjectionMatrix();\r\n\r\n    let controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.25;\r\n    controls.enableZoom = true;\r\n    controls.zoomSpeed = 0.1;\r\n    controls.enableKeys = false;\r\n    controls.screenSpacePanning = false;\r\n    controls.enableRotate = true;\r\n    controls.autoRotate = true;\r\n    controls.dampingFactor = 1;\r\n    controls.autoRotateSpeed = 1.2;\r\n    controls.enablePan = false;\r\n    controls.target.set(center.x, center.y, center.z);\r\n    controls.update();\r\n    this.controls = controls;\r\n    this.renderer.setSize(this.width, this.height);\r\n    this.container.appendChild(this.renderer.domElement);\r\n    this.start();\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate);\r\n    }\r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  animate() {\r\n    this.frameId = requestAnimationFrame(this.animate);\r\n    this.controls.update();\r\n    this.renderScene();\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId);\r\n  }\r\n\r\n  handleWindowResize() {\r\n    let width = window.innerWidth;\r\n    let height = window.innerHeight;\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n    this.destroyContext();\r\n  }\r\n\r\n  destroyContext() {\r\n    this.container.removeChild(this.renderer.domElement);\r\n    this.renderer.forceContextLoss();\r\n    this.renderer.context = null;\r\n    this.renderer.domElement = null;\r\n    this.renderer = null;\r\n  }\r\n\r\n  render() {\r\n    const width = \"100%\";\r\n    const height = \"100%\";\r\n    return (\r\n      <div\r\n        ref={(container) => {\r\n          this.container = container;\r\n        }}\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          position: \"absolute\",\r\n          overflow: \"hidden\",\r\n        }}></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scene;\r\n","import React, { Component } from 'react';\r\nimport Scene from './Scene';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Scene />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}